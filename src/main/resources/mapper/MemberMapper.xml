<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.polaroid.app.member.MemberMapper">

 		<!-- 회원정보 조회 -->
        <select id="selectMemberByMemberId" parameterType="int" resultType="MemberDto">
      		SELECT member_id AS memberId,
      					member_email AS memberEmail,
      					member_nick AS memberNick,
      					member_name AS memberName,
      					member_phone AS memberPhone,
      					member_pwd AS memberPwd,
      					member_statuscode AS memberStatusCode,
      					member_stopperiod AS memberStopPeriod,
      					member_firststopdate AS memberFirstStopDate
      		FROM member
      		WHERE member_id = #{memberId}
        </select>

		<!-- 인증번호 메일 전송 -->
		<insert id="insertAuthentication" parameterType="map">
				INSERT INTO auth_temp(auth_email, auth_code)
				VALUES(#{authEmail}, #{authCode})
		</insert>

		<!-- 인증번호 일치 여부 -->
		<select id="selectAuthentication" parameterType="int" resultType="int">
				SELECT COUNT(auth_code)
				FROM auth_temp
				WHERE auth_code = #{memberAuthentication}
		</select>
		
		<!-- 이메일 중복 체크 -->
		<select id="selectEmail" parameterType="String" resultType="int">
				SELECT COUNT(member_email)
				FROM member
				WHERE member_email = #{memberEmail}
		</select>
		
		<!-- 닉네임 중복 체크 -->
		<select id="selectNick" parameterType="String" resultType="int">
				SELECT COUNT(member_nick)
				FROM member
				WHERE member_nick = #{memberNick}
		</select>
		
		<!-- 전화번호 중복 체크 -->
		<select id="selectPhone" parameterType="String" resultType="int">
				SELECT COUNT(member_phone)
				FROM member
				WHERE member_phone = #{memberPhone}
		</select>

		<!-- 회원가입 -->
		<insert id="insertMember" parameterType="MemberDto">
				INSERT INTO member(member_email,
												 member_nick,
												 member_name,
												 member_phone,
												 member_pwd)
				VALUES(#{memberEmail},
							#{memberNick},
							#{memberName},
							#{memberPhone},
							#{memberPwd})
		</insert>
		
		<!-- 로그인 -->
		<select id="selectMember" parameterType="MemberDto" resultType="MemberDto">
				SELECT member_id AS memberId,
							member_email AS memberEmail,
							member_nick AS memberNick,
							member_name AS memberName,
							member_phone AS memberPhone,
							member_pwd AS memberPwd,
							member_statuscode AS memberStatusCode
				FROM member
				WHERE member_email = #{memberEmail}
							AND
							member_pwd = #{memberPwd}
		</select>
		
		<!-- 회원탈퇴 및 비밀번호 일치 여부 -->
		<update id="updateMember" parameterType="int">
				UPDATE member
				SET member_statuscode = '4'
				WHERE member_id = #{memberId}
		</update>
		
	  <!-- 회원 비밀번호 변경 -->
      <update id="updatePwd" parameterType="MemberDto">
         update member
         set member_pwd = #{memberPwd}
         where member_email = #{memberEmail}
      </update>
      
      <!-- 비밀번호 변경시 회원 존재유무 판단 -->
      <select id="selectMemberEmail" parameterType="string" resultType="int">
         SELECT COUNT(member_email)
         FROM member
         WHERE member_email = #{memberEmail}
      </select>
		
	  <!-- 관리자페이지에 모든 회원 조회 -->
      <select id="adminSelectMemberAll" resultType="MemberProfileDto">
			SELECT m.member_nick AS MemberNick,
				m.member_stopperiod AS memberStopPeriod,
				m.member_email as memberEmail,
			    p.profile_filename AS profileFileName,
			    p.profile_filepath AS profileFilePath,
			    p.profile_fileuuid AS profileFileUuid
			FROM member m LEFT OUTER JOIN profile p
			ON m.member_id = p.member_id
			WHERE member_email NOT IN  ( SELECT m.member_email
														     FROM member m LEFT OUTER JOIN profile p
														     ON m.member_id = p.member_id
														     WHERE member_email LIKE 'admin%')
			AND m.member_stopperiod = '미정지'
      </select>
      
      <!-- 관리자가 한 명의 회원에게 임의로 정지를 시킬 수 있다.(7일, 30일, 영구) -->
      <update id="updateMemberStop" parameterType="MemberProfileDto">
      		UPDATE member
      		SET member_stopperiod = #{memberStopPeriod},
      			   member_firststopdate = NOW()
      		WHERE member_nick = #{memberNick}
      </update>
      
      <!-- 정지기간이 7일, 30일, 영구에 따라 상태코드 변경 -->
      <update id="updateStatusCode" parameterType="MemberProfileDto">
      		UPDATE member
      		SET member_statuscode =
				CASE
					WHEN member_stopperiod = "미정지" THEN "0"
					WHEN member_stopperiod = "7일" THEN "1"
					WHEN member_stopperiod = "30일" THEN "2"
					WHEN member_stopperiod = "영구" THEN "3"
				END	
			WHERE member_nick = #{memberNick}
      </update>
      
      <!-- 정지된 회원의 리스트 조회 -->
      <select id="stopSelectMemberList" resultType="MemberProfileDto">
      		SELECT m.member_nick AS MemberNick,
      					m.member_stopperiod AS memberStopPeriod,
      					p.profile_filename AS profileFileName,
      					p.profile_filepath AS profileFilePath,
      					p.profile_fileuuid AS profileFileUuid
      		FROM member m LEFT OUTER JOIN profile p
      		ON m.member_id = p.member_id
      		WHERE member_stopperiod != '미정지'
	 </select>
      
      <!-- 관리자가 정지된 회원을 다시 미정지 상태로 수정 -->
      <update id="updateMemberStopRecovery" parameterType="MemberProfileDto">
      		UPDATE member
      		SET member_stopperiod = '미정지'
      		WHERE member_nick = #{memberNick}
      </update>
      
      <!-- 미정지 상태로 상태코드 변경 시 fisrtstopdate 값을 null로 수정 -->
      <update id="updateFirstStopDate" parameterType="MemberProfileDto">
      		UPDATE member
      		SET member_firststopdate = null
      		WHERE member_stopperiod = "미정지"
      </update>
      
</mapper>